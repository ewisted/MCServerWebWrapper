#pragma checksum "C:\Users\RGBeast\source\repos\MCServerWebWrapper\MCServerWebWrapper.Client\Pages\Servers.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8eb9c677cd97b63f5e03a9350de0d6dd0f946de7"
// <auto-generated/>
#pragma warning disable 1591
namespace MCServerWebWrapper.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using MCServerWebWrapper.Client;
    using MCServerWebWrapper.Client.Shared;
    using Blazor.Extensions;
    using MCServerWebWrapper.Shared.SignalR;
    using MCServerWebWrapper.Shared.DTOs;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Components.RouteAttribute("/servers")]
    public class Servers : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
            base.BuildRenderTree(builder);
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "container-fluid");
            builder.AddContent(2, "\r\n\t");
            builder.AddMarkupContent(3, "<div class=\"row\">\r\n\t\t<h1>Minecraft Servers</h1>\r\n\t</div>\r\n\t");
            builder.OpenElement(4, "div");
            builder.AddAttribute(5, "class", "row");
            builder.AddContent(6, "\r\n\t\t");
            builder.OpenElement(7, "div");
            builder.AddAttribute(8, "class", "col-lg");
            builder.AddContent(9, "\r\n\t\t\t");
            builder.OpenElement(10, "div");
            builder.AddAttribute(11, "class", "card card-body");
            builder.AddContent(12, "\r\n\t\t\t\t");
            builder.OpenElement(13, "div");
            builder.AddAttribute(14, "class", "server-output");
            builder.AddAttribute(15, "id", "output-list");
            builder.AddContent(16, "\r\n");
#line 16 "C:\Users\RGBeast\source\repos\MCServerWebWrapper\MCServerWebWrapper.Client\Pages\Servers.cshtml"
                     foreach (var line in outputLines)
					{

#line default
#line hidden
            builder.AddContent(17, "\t\t\t\t\t\t");
            builder.OpenElement(18, "samp");
            builder.AddContent(19, line);
            builder.AddMarkupContent(20, "<br>");
            builder.CloseElement();
            builder.AddContent(21, "\r\n");
#line 19 "C:\Users\RGBeast\source\repos\MCServerWebWrapper\MCServerWebWrapper.Client\Pages\Servers.cshtml"
					}

#line default
#line hidden
            builder.AddContent(22, "\t\t\t\t");
            builder.CloseElement();
            builder.AddContent(23, "\r\n\t\t\t");
            builder.CloseElement();
            builder.AddContent(24, "\r\n\t\t\t");
            builder.OpenElement(25, "input");
            builder.AddAttribute(26, "class", "form-control");
            builder.AddAttribute(27, "type", "text");
            builder.AddAttribute(28, "placeholder", "Console Input");
            builder.AddAttribute(29, "value", Microsoft.AspNetCore.Components.BindMethods.GetValue(consoleInput));
            builder.AddAttribute(30, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => consoleInput = __value, consoleInput));
            builder.CloseElement();
            builder.AddContent(31, "\r\n\t\t\t");
            builder.OpenElement(32, "button");
            builder.AddAttribute(33, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, e => this.SendConsoleInput()));
            builder.AddAttribute(34, "type", "submit");
            builder.AddAttribute(35, "class", "btn btn-primary");
            builder.AddContent(36, "Send Input");
            builder.CloseElement();
            builder.AddContent(37, "\r\n\t\t");
            builder.CloseElement();
            builder.AddContent(38, "\r\n\t\t");
            builder.OpenElement(39, "div");
            builder.AddAttribute(40, "class", "col-sm");
            builder.AddContent(41, "\r\n\t\t\t");
            builder.OpenElement(42, "button");
            builder.AddAttribute(43, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, e => this.StartServer()));
            builder.AddAttribute(44, "type", "button");
            builder.AddAttribute(45, "class", "btn btn-primary");
            builder.AddContent(46, "Start Server");
            builder.CloseElement();
            builder.AddContent(47, "\r\n\t\t\t");
            builder.OpenElement(48, "button");
            builder.AddAttribute(49, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, e => this.StopServer()));
            builder.AddAttribute(50, "type", "button");
            builder.AddAttribute(51, "class", "btn btn-danger");
            builder.AddContent(52, "Stop Server");
            builder.CloseElement();
            builder.AddContent(53, "\r\n\t\t\t");
            builder.OpenElement(54, "div");
            builder.AddAttribute(55, "class", "card card-body");
            builder.AddContent(56, "\r\n\t\t\t\t");
            builder.OpenElement(57, "form");
            builder.AddContent(58, "\r\n\t\t\t\t\t");
            builder.OpenElement(59, "div");
            builder.AddAttribute(60, "class", "row");
            builder.AddContent(61, "\r\n\t\t\t\t\t\t");
            builder.OpenElement(62, "div");
            builder.AddAttribute(63, "class", "col");
            builder.AddContent(64, "\r\n\t\t\t\t\t\t\t");
            builder.OpenElement(65, "input");
            builder.AddAttribute(66, "type", "text");
            builder.AddAttribute(67, "class", "form-control");
            builder.AddAttribute(68, "placeholder", "Server Name");
            builder.AddAttribute(69, "required", true);
            builder.AddAttribute(70, "value", Microsoft.AspNetCore.Components.BindMethods.GetValue(serverName));
            builder.AddAttribute(71, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => serverName = __value, serverName));
            builder.CloseElement();
            builder.AddContent(72, "\r\n\t\t\t\t\t\t");
            builder.CloseElement();
            builder.AddContent(73, "\r\n\t\t\t\t\t\t");
            builder.OpenElement(74, "div");
            builder.AddAttribute(75, "class", "col");
            builder.AddContent(76, "\r\n\t\t\t\t\t\t\t");
            builder.OpenElement(77, "div");
            builder.AddAttribute(78, "class", "form-group");
            builder.AddContent(79, "\r\n\t\t\t\t\t\t\t\t");
            builder.OpenElement(80, "label");
            builder.AddAttribute(81, "for", "maxRam");
            builder.AddContent(82, "Max Ram in MB: ");
            builder.AddContent(83, maxRam);
            builder.CloseElement();
            builder.AddContent(84, "\r\n\t\t\t\t\t\t\t\t");
            builder.OpenElement(85, "input");
            builder.AddAttribute(86, "type", "range");
            builder.AddAttribute(87, "min", "512");
            builder.AddAttribute(88, "max", "8192");
            builder.AddAttribute(89, "step", "512");
            builder.AddAttribute(90, "class", "form-control-range");
            builder.AddAttribute(91, "id", "maxRam");
            builder.AddAttribute(92, "value", Microsoft.AspNetCore.Components.BindMethods.GetValue(maxRam));
            builder.AddAttribute(93, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => maxRam = __value, maxRam));
            builder.CloseElement();
            builder.AddContent(94, "\r\n\t\t\t\t\t\t\t");
            builder.CloseElement();
            builder.AddContent(95, "\r\n\t\t\t\t\t\t\t");
            builder.OpenElement(96, "div");
            builder.AddAttribute(97, "class", "form-group");
            builder.AddContent(98, "\r\n\t\t\t\t\t\t\t\t");
            builder.OpenElement(99, "label");
            builder.AddAttribute(100, "for", "minRam");
            builder.AddContent(101, "Minimum Ram in MB: ");
            builder.AddContent(102, minRam);
            builder.CloseElement();
            builder.AddContent(103, "\r\n\t\t\t\t\t\t\t\t");
            builder.OpenElement(104, "input");
            builder.AddAttribute(105, "type", "range");
            builder.AddAttribute(106, "min", "512");
            builder.AddAttribute(107, "max", "8192");
            builder.AddAttribute(108, "step", "512");
            builder.AddAttribute(109, "class", "form-control-range");
            builder.AddAttribute(110, "id", "minRam");
            builder.AddAttribute(111, "value", Microsoft.AspNetCore.Components.BindMethods.GetValue(minRam));
            builder.AddAttribute(112, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => minRam = __value, minRam));
            builder.CloseElement();
            builder.AddContent(113, "\r\n\t\t\t\t\t\t\t");
            builder.CloseElement();
            builder.AddContent(114, "\r\n\t\t\t\t\t\t");
            builder.CloseElement();
            builder.AddContent(115, "\r\n\t\t\t\t\t");
            builder.CloseElement();
            builder.AddContent(116, "\r\n\t\t\t\t\t");
            builder.OpenElement(117, "button");
            builder.AddAttribute(118, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, e => this.NewServer()));
            builder.AddAttribute(119, "type", "button");
            builder.AddAttribute(120, "class", "btn btn-primary");
            builder.AddContent(121, "New Server");
            builder.CloseElement();
            builder.AddContent(122, "\r\n\t\t\t\t");
            builder.CloseElement();
            builder.AddContent(123, "\r\n\t\t\t");
            builder.CloseElement();
            builder.AddContent(124, "\r\n\t\t");
            builder.CloseElement();
            builder.AddContent(125, "\r\n\t");
            builder.CloseElement();
            builder.AddContent(126, "\r\n");
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 52 "C:\Users\RGBeast\source\repos\MCServerWebWrapper\MCServerWebWrapper.Client\Pages\Servers.cshtml"
            
	string serverId;
	string consoleInput;
	string serverName;
	int maxRam = 2048;
	int minRam = 2048;
	MinecraftServerDTO currentServer;
	List<string> outputLines = new List<string>();

	protected override async Task OnInitAsync()
	{
		var connection = new HubConnectionBuilder()
			.WithUrl("/signalr",
			opt =>
			{
				opt.LogLevel = SignalRLogLevel.Trace;
				opt.Transport = HttpTransportType.WebSockets;
			})
			.Build(JSRuntime);

		connection.On<string, string>(SignalrMethodNames.ServerOutput, this.HandleOutput);

		await connection.StartAsync();

	}

	private async void NewServer()
	{
		if (!String.IsNullOrEmpty(serverName) && maxRam >= minRam)
		{
			currentServer = await Http.GetJsonAsync<MinecraftServerDTO>($"api/MCServer/NewServer?name={serverName}&maxRamMB={maxRam}&minRamMB={minRam}");
			serverId = currentServer.Id;
			Console.WriteLine(serverId);
			Console.WriteLine(currentServer);
		}
	}

	private void SendConsoleInput()
	{

	}

	private async void StartServer()
	{
		if (!String.IsNullOrEmpty(serverId))
		{
			outputLines.Add("Starting Server...");
			this.StateHasChanged();
			await Http.GetAsync($"api/MCServer/StartServer?id={serverId}");
		}
		else
		{
			outputLines.Add("No server selected");
			this.StateHasChanged();
		}
	}

	private async void StopServer()
	{
		await Http.GetAsync($"api/MCServer/StopServer?id={serverId}");
	}

	private async Task HandleOutput(string id, string msg)
	{
		if (id != serverId) return;
		else
		{
			outputLines.Add(msg);
			this.StateHasChanged();
			await JSRuntime.InvokeAsync<bool>("ScrollToBottom");
			return;
		}
	}

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
